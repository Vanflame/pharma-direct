rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Addresses
    match /addresses/{addressId} {
      allow read, write: if request.auth != null;
    }

    // Products
    match /products/{productId} {
      allow read: if true; // make products public
      allow create, update, delete: if request.auth != null;
    }

    // ORDERS – public for pay.html and payment processing
    match /orders/{orderId} {
      // Anyone can view an order
      allow read: if true;

      // Allow payment processing updates without authentication
      allow update: if
        // Allow updating payment-related fields for payment processing
        (request.resource.data.keys().hasAll(['paymentStatus', 'stage', 'paidAt', 'updatedAt']) &&
         request.resource.data.paymentStatus == 'Paid' &&
         request.resource.data.stage in ['Confirmed', 'Processing', 'Shipped', 'Delivered']) ||

        // Allow updating just payment status
        (request.resource.data.keys().hasOnly(['paymentStatus']) &&
         request.resource.data.paymentStatus == 'Paid') ||

        // Allow updating payment status + paidAt
        (request.resource.data.keys().hasOnly(['paymentStatus', 'paidAt']) &&
         request.resource.data.paymentStatus == 'Paid') ||

        // Allow updating payment status + stage + paidAt + updatedAt
        (request.resource.data.keys().hasOnly(['paymentStatus', 'stage', 'paidAt', 'updatedAt']) &&
         request.resource.data.paymentStatus == 'Paid' &&
         request.resource.data.stage in ['Confirmed', 'Processing', 'Shipped', 'Delivered']);

      // Still require auth to create new orders
      allow create: if request.auth != null;
    }

    // PHARMACIES – allow payment processing updates
    match /pharmacies/{pharmacyId} {
      allow read: if true;       // public info
      allow update: if 
        // Allow payment processing updates without auth
        (request.resource.data.keys().hasAll(['walletBalance', 'pendingBalance', 'updatedAt']) ||
         request.resource.data.keys().hasAll(['walletBalance', 'updatedAt']) ||
         request.resource.data.keys().hasAll(['pendingBalance', 'updatedAt'])) ||
        // Allow authenticated updates
        request.auth != null;
      allow create: if request.auth != null;
    }

    // TRANSACTIONS – allow payment processing
    match /transactions/{transactionId} {
      allow read: if request.auth != null;
      allow create: if true; // Allow payment processing to create transactions
      allow update: if request.auth != null;
    }

    // Admin full access
    match /{document=**} {
      allow read, write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings
    match /settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Withdrawals
    match /withdrawalRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
