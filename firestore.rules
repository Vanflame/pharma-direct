rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read and write their own user documents
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Users can read and write their own addresses
    match /addresses/{addressId} {
      allow read, write: if request.auth != null &&
        (resource.data.userId == request.auth.uid ||
         request.data.userId == request.auth.uid);
    }

    // TEMPORARY: Allow all authenticated users to write to addresses (for testing)
    // UNCOMMENT THIS LINE if the above rule doesn't work:
    match /addresses/{addressId} {
     allow read, write: if request.auth != null;
    }

    // Products: authenticated users can read, pharmacies can create and update their own products
    match /products/{productId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        // Admin can create all products
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        // Pharmacy can create their own products
        request.data.pharmacyId == request.auth.uid
      );
      // Allow stock updates during order processing (any authenticated user)
      allow update: if request.auth != null;
      allow delete: if request.auth != null && (
        // Admin can delete all products
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        // Pharmacy can delete their own products
        resource.data.pharmacyId == request.auth.uid
      );
    }

    // TEMPORARY: More permissive rules for testing pharmacy product updates
    // Uncomment this if the above rule still doesn't work:
    match /products/{productId} {
       allow read, write: if request.auth != null &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pharmacy';
     }

    // Orders: users can manage their own orders, pharmacies can read/update orders containing their products
    match /orders/{orderId} {
      allow read: if request.auth != null && (
        // Users can read their own orders
        resource.data.userId == request.auth.uid ||
        // Pharmacies can read orders containing their products
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pharmacy' ||
        // Admin can read all orders
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow write: if request.auth != null && (
        // Users can update their own orders
        resource.data.userId == request.auth.uid ||
        // Pharmacies can update orders containing their products
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pharmacy' ||
        // Admin can update all orders
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if request.auth != null;
    }

    // Admin can read/write all documents
    match /{document=**} {
      allow read, write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Pharmacies can manage their own data, allow wallet updates during payment
    match /pharmacies/{pharmacyId} {
      allow read: if request.auth != null;
      // Allow wallet balance updates during payment processing (any authenticated user)
      allow update: if request.auth != null;
      // Allow full write access for pharmacy owners and admin
      allow write: if request.auth != null &&
        (request.auth.uid == pharmacyId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Settings can be read by authenticated users, written by admin
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Transactions: pharmacies can read their own transactions, admin can read all, users can create during payment
    match /transactions/{transactionId} {
      allow read: if request.auth != null && (
        resource.data.pharmacyId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if request.auth != null;
    }

    // Withdrawal requests: pharmacies can create and read their own, admin can read/write all
    match /withdrawalRequests/{requestId} {
      allow read: if request.auth != null && (
        resource.data.pharmacyId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Allow any authenticated user to create withdrawal requests (for testing)
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
